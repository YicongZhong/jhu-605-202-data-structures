


Create new IntegerSorter...
  original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
  x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 



quickSortR (recursive)...
  original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
  insertionAt = 2
  initPivotMethod = 2
Un-sort...
  At top of call:
    original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
  At bottom of call:
    original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
quickSortR__internal...
  start = 0
  end = 49
Prep partition...
  Median of three method:
    x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    start = 0
    end = 49
    mid = 24
    x[start] = 29
    x[end] = 25
    x[mid] = 6
    Picked end -> swap with start
    x[start] = 25
    x[end] = 29
    x[mid] = 6
    x = 25 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 29 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 0
  end = 23
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 0
    end = 23
    mid = 11
    x[start] = 12
    x[end] = 22
    x[mid] = 18
    Picked mid -> swap with start
    x[start] = 18
    x[end] = 22
    x[mid] = 12
    x = 18 20 17 13 16 7 5 9 11 4 24 12 21 15 8 1 23 3 10 19 2 14 6 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
  position of partition found!
    6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 0
  end = 16
Prep partition...
  Median of three method:
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 0
    end = 16
    mid = 8
    x[start] = 6
    x[end] = 3
    x[mid] = 11
    Picked start -> no swap
  position of partition found!
    3 1 2 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 0
  end = 4
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 0
    end = 4
    mid = 2
    x[start] = 3
    x[end] = 5
    x[mid] = 2
    Picked start -> no swap
  position of partition found!
    2 1 3 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
Switching to insertion sort...
  start = 0
  end = 1
  2 1 3 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    i = 1
    j = 1
    x[j] = 1
    x[j - 1] = 2
  1 2 3 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
Switching to insertion sort...
  start = 3
  end = 4
  1 2 3 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    i = 4
  1 2 3 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 6
  end = 16
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 6
    end = 16
    mid = 11
    x[start] = 7
    x[end] = 14
    x[mid] = 12
    Picked mid -> swap with start
    x[start] = 12
    x[end] = 14
    x[mid] = 7
    x = 1 2 3 4 5 6 12 9 11 16 13 7 10 15 8 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
  position of partition found!
    1 2 3 4 5 6 8 9 11 10 7 12 13 15 16 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 6
  end = 10
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 8 9 11 10 7 12 13 15 16 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 6
    end = 10
    mid = 8
    x[start] = 8
    x[end] = 7
    x[mid] = 11
    Picked start -> no swap
  position of partition found!
    1 2 3 4 5 6 7 8 11 10 9 12 13 15 16 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 8
  end = 10
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 11 10 9 12 13 15 16 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 8
    end = 10
    mid = 9
    x[start] = 11
    x[end] = 9
    x[mid] = 10
    Picked mid -> swap with start
    x[start] = 10
    x[end] = 9
    x[mid] = 11
    x = 1 2 3 4 5 6 7 8 10 11 9 12 13 15 16 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 15 16 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 12
  end = 16
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 15 16 17 14 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 12
    end = 16
    mid = 14
    x[start] = 13
    x[end] = 14
    x[mid] = 16
    Picked end -> swap with start
    x[start] = 14
    x[end] = 13
    x[mid] = 16
    x = 1 2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 13 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 17 15 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 14
  end = 16
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 16 17 15 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 14
    end = 16
    mid = 15
    x[start] = 16
    x[end] = 15
    x[mid] = 17
    Picked start -> no swap
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 18
  end = 23
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 23 19 21 24 20 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 18
    end = 23
    mid = 20
    x[start] = 23
    x[end] = 22
    x[mid] = 21
    Picked end -> swap with start
    x[start] = 22
    x[end] = 23
    x[mid] = 21
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 22 19 21 24 20 23 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 19 21 22 24 23 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 18
  end = 20
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 19 21 22 24 23 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 18
    end = 20
    mid = 19
    x[start] = 20
    x[end] = 21
    x[mid] = 19
    Picked start -> no swap
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 24 23 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
Switching to insertion sort...
  start = 22
  end = 23
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 24 23 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    i = 23
    j = 23
    x[j] = 23
    x[j - 1] = 24
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortR__internal...
  start = 25
  end = 49
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 25
    end = 49
    mid = 37
    x[start] = 46
    x[end] = 29
    x[mid] = 31
    Picked mid -> swap with start
    x[start] = 31
    x[end] = 29
    x[mid] = 46
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 31 47 38 37 45 28 32 44 48 35 41 27 46 50 34 43 33 49 26 30 36 39 42 40 29 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 29 30 26 27 28 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
quickSortR__internal...
  start = 25
  end = 29
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 29 30 26 27 28 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
    start = 25
    end = 29
    mid = 27
    x[start] = 29
    x[end] = 28
    x[mid] = 26
    Picked end -> swap with start
    x[start] = 28
    x[end] = 29
    x[mid] = 26
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 28 30 26 27 29 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 26 28 30 29 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
Switching to insertion sort...
  start = 25
  end = 26
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 26 28 30 29 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
    i = 26
    j = 26
    x[j] = 26
    x[j - 1] = 27
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 30 29 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
Switching to insertion sort...
  start = 28
  end = 29
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 30 29 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
    i = 29
    j = 29
    x[j] = 29
    x[j - 1] = 30
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
quickSortR__internal...
  start = 31
  end = 49
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
    start = 31
    end = 49
    mid = 40
    x[start] = 32
    x[end] = 47
    x[mid] = 43
    Picked mid -> swap with start
    x[start] = 43
    x[end] = 47
    x[mid] = 32
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 43 44 48 35 41 45 46 50 34 32 33 49 37 38 36 39 42 40 47 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 40 42 39 35 41 36 38 37 34 32 33 43 49 50 46 45 48 44 47 
quickSortR__internal...
  start = 31
  end = 41
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 40 42 39 35 41 36 38 37 34 32 33 43 49 50 46 45 48 44 47 
    start = 31
    end = 41
    mid = 36
    x[start] = 40
    x[end] = 33
    x[mid] = 36
    Picked mid -> swap with start
    x[start] = 36
    x[end] = 33
    x[mid] = 40
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 36 42 39 35 41 40 38 37 34 32 33 43 49 50 46 45 48 44 47 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33 32 34 35 36 40 38 37 41 39 42 43 49 50 46 45 48 44 47 
quickSortR__internal...
  start = 31
  end = 34
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33 32 34 35 36 40 38 37 41 39 42 43 49 50 46 45 48 44 47 
    start = 31
    end = 34
    mid = 32
    x[start] = 33
    x[end] = 35
    x[mid] = 32
    Picked start -> no swap
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 40 38 37 41 39 42 43 49 50 46 45 48 44 47 
Switching to insertion sort...
  start = 33
  end = 34
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 40 38 37 41 39 42 43 49 50 46 45 48 44 47 
    i = 34
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 40 38 37 41 39 42 43 49 50 46 45 48 44 47 
quickSortR__internal...
  start = 36
  end = 41
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 40 38 37 41 39 42 43 49 50 46 45 48 44 47 
    start = 36
    end = 41
    mid = 38
    x[start] = 40
    x[end] = 42
    x[mid] = 37
    Picked start -> no swap
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 39 38 37 40 41 42 43 49 50 46 45 48 44 47 
quickSortR__internal...
  start = 36
  end = 38
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 39 38 37 40 41 42 43 49 50 46 45 48 44 47 
    start = 36
    end = 38
    mid = 37
    x[start] = 39
    x[end] = 37
    x[mid] = 38
    Picked mid -> swap with start
    x[start] = 38
    x[end] = 37
    x[mid] = 39
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 38 39 37 40 41 42 43 49 50 46 45 48 44 47 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 49 50 46 45 48 44 47 
Switching to insertion sort...
  start = 40
  end = 41
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 49 50 46 45 48 44 47 
    i = 41
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 49 50 46 45 48 44 47 
quickSortR__internal...
  start = 43
  end = 49
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 49 50 46 45 48 44 47 
    start = 43
    end = 49
    mid = 46
    x[start] = 49
    x[end] = 47
    x[mid] = 45
    Picked end -> swap with start
    x[start] = 47
    x[end] = 49
    x[mid] = 45
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 47 50 46 45 48 44 49 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 50 49 
quickSortR__internal...
  start = 43
  end = 45
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 50 49 
    start = 43
    end = 45
    mid = 44
    x[start] = 44
    x[end] = 46
    x[mid] = 45
    Picked mid -> swap with start
    x[start] = 45
    x[end] = 46
    x[mid] = 44
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 45 44 46 47 48 50 49 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 50 49 
quickSortR__internal...
  start = 47
  end = 49
Prep partition...
  Median of three method:
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 50 49 
    start = 47
    end = 49
    mid = 48
    x[start] = 48
    x[end] = 49
    x[mid] = 50
    Picked end -> swap with start
    x[start] = 49
    x[end] = 48
    x[mid] = 50
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 48 
  position of partition found!
    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  lastTimedDuration = 8619939
  cumulativeDuration = 8619939
Reset timer...
  At top of call:
    cumulativeDuration = 8619939
    lastTimedDuration = 8619939
    lastTimedEnd = 25109287268172
    lastTimedStart = 25109278648233
    isTimerOn = false
  At bottom of call:
    cumulativeDuration = 0
    lastTimedDuration = 0
    lastTimedEnd = 0
    lastTimedStart = 0
    isTimerOn = false



quickSortIS (iterative with Stack class)...
  original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
  insertionAt = 2
  initPivotMethod = 2
Un-sort...
  At top of call:
    original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  At bottom of call:
    original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
quickSortIS__internal...
  start = 0
  end = 49
Prep partition...
  Median of three method:
    x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    start = 0
    end = 49
    mid = 24
    x[start] = 29
    x[end] = 25
    x[mid] = 6
    Picked end -> swap with start
    x[start] = 25
    x[end] = 29
    x[mid] = 6
    x = 25 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 29 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortIS__internal...
  start = 25
  end = 49
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 25
    end = 49
    mid = 37
    x[start] = 46
    x[end] = 29
    x[mid] = 31
    Picked mid -> swap with start
    x[start] = 31
    x[end] = 29
    x[mid] = 46
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 31 47 38 37 45 28 32 44 48 35 41 27 46 50 34 43 33 49 26 30 36 39 42 40 29 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
quickSortIS__internal...
  start = 31
  end = 49
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
    start = 31
    end = 49
    mid = 40
    x[start] = 32
    x[end] = 47
    x[mid] = 43
    Picked mid -> swap with start
    x[start] = 43
    x[end] = 47
    x[mid] = 32
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 43 44 48 35 41 45 46 50 34 32 33 49 37 38 36 39 42 40 47 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 49 50 46 45 48 44 47 
quickSortIS__internal...
  start = 43
  end = 49
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 49 50 46 45 48 44 47 
    start = 43
    end = 49
    mid = 46
    x[start] = 49
    x[end] = 47
    x[mid] = 45
    Picked end -> swap with start
    x[start] = 47
    x[end] = 49
    x[mid] = 45
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 47 50 46 45 48 44 49 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 50 49 
quickSortIS__internal...
  start = 47
  end = 49
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 50 49 
    start = 47
    end = 49
    mid = 48
    x[start] = 48
    x[end] = 49
    x[mid] = 50
    Picked end -> swap with start
    x[start] = 49
    x[end] = 48
    x[mid] = 50
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 49 50 48 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 43
  end = 45
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 49 50 
    start = 43
    end = 45
    mid = 44
    x[start] = 44
    x[end] = 46
    x[mid] = 45
    Picked mid -> swap with start
    x[start] = 45
    x[end] = 46
    x[mid] = 44
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 45 44 46 47 48 49 50 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 31
  end = 41
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 49 50 
    start = 31
    end = 41
    mid = 36
    x[start] = 40
    x[end] = 33
    x[mid] = 36
    Picked mid -> swap with start
    x[start] = 36
    x[end] = 33
    x[mid] = 40
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 36 42 39 35 41 40 38 37 34 32 33 43 44 45 46 47 48 49 50 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 40 38 37 41 39 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 36
  end = 41
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 40 38 37 41 39 42 43 44 45 46 47 48 49 50 
    start = 36
    end = 41
    mid = 38
    x[start] = 40
    x[end] = 42
    x[mid] = 37
    Picked start -> no swap
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 39 38 37 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 40
  end = 41
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 39 38 37 40 41 42 43 44 45 46 47 48 49 50 
    i = 41
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 39 38 37 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 36
  end = 38
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 39 38 37 40 41 42 43 44 45 46 47 48 49 50 
    start = 36
    end = 38
    mid = 37
    x[start] = 39
    x[end] = 37
    x[mid] = 38
    Picked mid -> swap with start
    x[start] = 38
    x[end] = 37
    x[mid] = 39
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 38 39 37 40 41 42 43 44 45 46 47 48 49 50 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 31
  end = 34
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 31
    end = 34
    mid = 32
    x[start] = 33
    x[end] = 35
    x[mid] = 32
    Picked start -> no swap
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 33
  end = 34
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 34
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 25
  end = 29
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 25
    end = 29
    mid = 27
    x[start] = 29
    x[end] = 28
    x[mid] = 26
    Picked end -> swap with start
    x[start] = 28
    x[end] = 29
    x[mid] = 26
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 28 30 26 27 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 27 26 28 30 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 25
  end = 26
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 27 26 28 30 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 26
    j = 26
    x[j] = 26
    x[j - 1] = 27
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 30 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 28
  end = 29
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 30 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 29
    j = 29
    x[j] = 29
    x[j - 1] = 30
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 0
  end = 23
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 0
    end = 23
    mid = 11
    x[start] = 12
    x[end] = 22
    x[mid] = 18
    Picked mid -> swap with start
    x[start] = 18
    x[end] = 22
    x[mid] = 12
    x = 18 20 17 13 16 7 5 9 11 4 24 12 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  position of partition found!
    6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 23 19 21 24 20 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 18
  end = 23
Prep partition...
  Median of three method:
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 23 19 21 24 20 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 18
    end = 23
    mid = 20
    x[start] = 23
    x[end] = 22
    x[mid] = 21
    Picked end -> swap with start
    x[start] = 22
    x[end] = 23
    x[mid] = 21
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 22 19 21 24 20 23 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  position of partition found!
    6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 20 19 21 22 24 23 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 22
  end = 23
  6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 20 19 21 22 24 23 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 23
    j = 23
    x[j] = 23
    x[j - 1] = 24
  6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 20 19 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 18
  end = 20
Prep partition...
  Median of three method:
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 20 19 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 18
    end = 20
    mid = 19
    x[start] = 20
    x[end] = 21
    x[mid] = 19
    Picked start -> no swap
  position of partition found!
    6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 0
  end = 16
Prep partition...
  Median of three method:
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 0
    end = 16
    mid = 8
    x[start] = 6
    x[end] = 3
    x[mid] = 11
    Picked start -> no swap
  position of partition found!
    3 1 2 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 6
  end = 16
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 6
    end = 16
    mid = 11
    x[start] = 7
    x[end] = 14
    x[mid] = 12
    Picked mid -> swap with start
    x[start] = 12
    x[end] = 14
    x[mid] = 7
    x = 3 1 2 4 5 6 12 9 11 16 13 7 10 15 8 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  position of partition found!
    3 1 2 4 5 6 8 9 11 10 7 12 13 15 16 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 12
  end = 16
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 8 9 11 10 7 12 13 15 16 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 12
    end = 16
    mid = 14
    x[start] = 13
    x[end] = 14
    x[mid] = 16
    Picked end -> swap with start
    x[start] = 14
    x[end] = 13
    x[mid] = 16
    x = 3 1 2 4 5 6 8 9 11 10 7 12 14 15 16 17 13 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  position of partition found!
    3 1 2 4 5 6 8 9 11 10 7 12 13 14 16 17 15 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 14
  end = 16
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 8 9 11 10 7 12 13 14 16 17 15 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 14
    end = 16
    mid = 15
    x[start] = 16
    x[end] = 15
    x[mid] = 17
    Picked start -> no swap
  position of partition found!
    3 1 2 4 5 6 8 9 11 10 7 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 6
  end = 10
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 8 9 11 10 7 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 6
    end = 10
    mid = 8
    x[start] = 8
    x[end] = 7
    x[mid] = 11
    Picked start -> no swap
  position of partition found!
    3 1 2 4 5 6 7 8 11 10 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 8
  end = 10
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 7 8 11 10 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 8
    end = 10
    mid = 9
    x[start] = 11
    x[end] = 9
    x[mid] = 10
    Picked mid -> swap with start
    x[start] = 10
    x[end] = 9
    x[mid] = 11
    x = 3 1 2 4 5 6 7 8 10 11 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  position of partition found!
    3 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIS__internal...
  start = 0
  end = 4
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 0
    end = 4
    mid = 2
    x[start] = 3
    x[end] = 5
    x[mid] = 2
    Picked start -> no swap
  position of partition found!
    2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 0
  end = 1
  2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 1
    j = 1
    x[j] = 1
    x[j - 1] = 2
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 3
  end = 4
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 4
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  lastTimedDuration = 8605435
  cumulativeDuration = 8605435
Reset timer...
  At top of call:
    cumulativeDuration = 8605435
    lastTimedDuration = 8605435
    lastTimedEnd = 25109296349719
    lastTimedStart = 25109287744284
    isTimerOn = false
  At bottom of call:
    cumulativeDuration = 0
    lastTimedDuration = 0
    lastTimedEnd = 0
    lastTimedStart = 0
    isTimerOn = false



quickSortIA (iterative with array)...
  original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
  insertionAt = 2
  initPivotMethod = 2
Un-sort...
  At top of call:
    original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  At bottom of call:
    original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
quickSortIA__internal...
  start = 0
  end = 49
Prep partition...
  Median of three method:
    x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    start = 0
    end = 49
    mid = 24
    x[start] = 29
    x[end] = 25
    x[mid] = 6
    Picked end -> swap with start
    x[start] = 25
    x[end] = 29
    x[mid] = 6
    x = 25 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 29 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
quickSortIA__internal...
  start = 25
  end = 49
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 46 47 38 37 45 28 32 44 48 35 41 27 31 50 34 43 33 49 26 30 36 39 42 40 29 
    start = 25
    end = 49
    mid = 37
    x[start] = 46
    x[end] = 29
    x[mid] = 31
    Picked mid -> swap with start
    x[start] = 31
    x[end] = 29
    x[mid] = 46
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 31 47 38 37 45 28 32 44 48 35 41 27 46 50 34 43 33 49 26 30 36 39 42 40 29 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
quickSortIA__internal...
  start = 31
  end = 49
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 44 48 35 41 45 46 50 34 43 33 49 37 38 36 39 42 40 47 
    start = 31
    end = 49
    mid = 40
    x[start] = 32
    x[end] = 47
    x[mid] = 43
    Picked mid -> swap with start
    x[start] = 43
    x[end] = 47
    x[mid] = 32
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 43 44 48 35 41 45 46 50 34 32 33 49 37 38 36 39 42 40 47 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 49 50 46 45 48 44 47 
quickSortIA__internal...
  start = 43
  end = 49
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 49 50 46 45 48 44 47 
    start = 43
    end = 49
    mid = 46
    x[start] = 49
    x[end] = 47
    x[mid] = 45
    Picked end -> swap with start
    x[start] = 47
    x[end] = 49
    x[mid] = 45
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 47 50 46 45 48 44 49 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 50 49 
quickSortIA__internal...
  start = 47
  end = 49
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 50 49 
    start = 47
    end = 49
    mid = 48
    x[start] = 48
    x[end] = 49
    x[mid] = 50
    Picked end -> swap with start
    x[start] = 49
    x[end] = 48
    x[mid] = 50
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 49 50 48 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 43
  end = 45
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 49 50 
    start = 43
    end = 45
    mid = 44
    x[start] = 44
    x[end] = 46
    x[mid] = 45
    Picked mid -> swap with start
    x[start] = 45
    x[end] = 46
    x[mid] = 44
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 45 44 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 31
  end = 41
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 40 42 39 35 41 36 38 37 34 32 33 43 44 45 46 47 48 49 50 
    start = 31
    end = 41
    mid = 36
    x[start] = 40
    x[end] = 33
    x[mid] = 36
    Picked mid -> swap with start
    x[start] = 36
    x[end] = 33
    x[mid] = 40
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 36 42 39 35 41 40 38 37 34 32 33 43 44 45 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 40 38 37 41 39 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 36
  end = 41
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 40 38 37 41 39 42 43 44 45 46 47 48 49 50 
    start = 36
    end = 41
    mid = 38
    x[start] = 40
    x[end] = 42
    x[mid] = 37
    Picked start -> no swap
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 39 38 37 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 40
  end = 41
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 39 38 37 40 41 42 43 44 45 46 47 48 49 50 
    i = 41
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 39 38 37 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 36
  end = 38
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 39 38 37 40 41 42 43 44 45 46 47 48 49 50 
    start = 36
    end = 38
    mid = 37
    x[start] = 39
    x[end] = 37
    x[mid] = 38
    Picked mid -> swap with start
    x[start] = 38
    x[end] = 37
    x[mid] = 39
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 38 39 37 40 41 42 43 44 45 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 31
  end = 34
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 33 32 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 31
    end = 34
    mid = 32
    x[start] = 33
    x[end] = 35
    x[mid] = 32
    Picked start -> no swap
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 33
  end = 34
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 34
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 25
  end = 29
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 29 30 26 27 28 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 25
    end = 29
    mid = 27
    x[start] = 29
    x[end] = 28
    x[mid] = 26
    Picked end -> swap with start
    x[start] = 28
    x[end] = 29
    x[mid] = 26
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 28 30 26 27 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 27 26 28 30 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 25
  end = 26
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 27 26 28 30 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 26
    j = 26
    x[j] = 26
    x[j - 1] = 27
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 30 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 28
  end = 29
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 30 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 29
    j = 29
    x[j] = 29
    x[j - 1] = 30
  12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 0
  end = 23
Prep partition...
  Median of three method:
    x = 12 20 17 13 16 7 5 9 11 4 24 18 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 0
    end = 23
    mid = 11
    x[start] = 12
    x[end] = 22
    x[mid] = 18
    Picked mid -> swap with start
    x[start] = 18
    x[end] = 22
    x[mid] = 12
    x = 18 20 17 13 16 7 5 9 11 4 24 12 21 15 8 1 23 3 10 19 2 14 6 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 23 19 21 24 20 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 18
  end = 23
Prep partition...
  Median of three method:
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 23 19 21 24 20 22 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 18
    end = 23
    mid = 20
    x[start] = 23
    x[end] = 22
    x[mid] = 21
    Picked end -> swap with start
    x[start] = 22
    x[end] = 23
    x[mid] = 21
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 22 19 21 24 20 23 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 20 19 21 22 24 23 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 22
  end = 23
  6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 20 19 21 22 24 23 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 23
    j = 23
    x[j] = 23
    x[j - 1] = 24
  6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 20 19 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 18
  end = 20
Prep partition...
  Median of three method:
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 20 19 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 18
    end = 20
    mid = 19
    x[start] = 20
    x[end] = 21
    x[mid] = 19
    Picked start -> no swap
  Returned from prep partition
  position of partition found!
    6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 0
  end = 16
Prep partition...
  Median of three method:
    x = 6 14 17 13 16 7 5 9 11 4 2 12 10 15 8 1 3 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 0
    end = 16
    mid = 8
    x[start] = 6
    x[end] = 3
    x[mid] = 11
    Picked start -> no swap
  Returned from prep partition
  position of partition found!
    3 1 2 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 6
  end = 16
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 7 9 11 16 13 12 10 15 8 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 6
    end = 16
    mid = 11
    x[start] = 7
    x[end] = 14
    x[mid] = 12
    Picked mid -> swap with start
    x[start] = 12
    x[end] = 14
    x[mid] = 7
    x = 3 1 2 4 5 6 12 9 11 16 13 7 10 15 8 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    3 1 2 4 5 6 8 9 11 10 7 12 13 15 16 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 12
  end = 16
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 8 9 11 10 7 12 13 15 16 17 14 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 12
    end = 16
    mid = 14
    x[start] = 13
    x[end] = 14
    x[mid] = 16
    Picked end -> swap with start
    x[start] = 14
    x[end] = 13
    x[mid] = 16
    x = 3 1 2 4 5 6 8 9 11 10 7 12 14 15 16 17 13 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    3 1 2 4 5 6 8 9 11 10 7 12 13 14 16 17 15 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 14
  end = 16
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 8 9 11 10 7 12 13 14 16 17 15 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 14
    end = 16
    mid = 15
    x[start] = 16
    x[end] = 15
    x[mid] = 17
    Picked start -> no swap
  Returned from prep partition
  position of partition found!
    3 1 2 4 5 6 8 9 11 10 7 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 6
  end = 10
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 8 9 11 10 7 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 6
    end = 10
    mid = 8
    x[start] = 8
    x[end] = 7
    x[mid] = 11
    Picked start -> no swap
  Returned from prep partition
  position of partition found!
    3 1 2 4 5 6 7 8 11 10 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 8
  end = 10
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 7 8 11 10 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 8
    end = 10
    mid = 9
    x[start] = 11
    x[end] = 9
    x[mid] = 10
    Picked mid -> swap with start
    x[start] = 10
    x[end] = 9
    x[mid] = 11
    x = 3 1 2 4 5 6 7 8 10 11 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  Returned from prep partition
  position of partition found!
    3 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
quickSortIA__internal...
  start = 0
  end = 4
Prep partition...
  Median of three method:
    x = 3 1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    start = 0
    end = 4
    mid = 2
    x[start] = 3
    x[end] = 5
    x[mid] = 2
    Picked start -> no swap
  Returned from prep partition
  position of partition found!
    2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 0
  end = 1
  2 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 1
    j = 1
    x[j] = 1
    x[j - 1] = 2
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
Switching to insertion sort...
  start = 3
  end = 4
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
    i = 4
  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  lastTimedDuration = 4282879
  cumulativeDuration = 4282879
Reset timer...
  At top of call:
    cumulativeDuration = 4282879
    lastTimedDuration = 4282879
    lastTimedEnd = 25109300963658
    lastTimedStart = 25109296680779
    isTimerOn = false
  At bottom of call:
    cumulativeDuration = 0
    lastTimedDuration = 0
    lastTimedEnd = 0
    lastTimedStart = 0
    isTimerOn = false



heapSort...
  original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
Un-sort...
  At top of call:
    original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  At bottom of call:
    original = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
    x = 29 40 17 13 39 7 5 30 11 49 24 18 33 34 50 1 23 27 48 19 28 14 47 22 6 46 2 38 37 45 10 32 44 3 35 41 8 31 15 21 43 4 9 26 16 36 20 42 12 25 
  START Build max heap...
    i = 1
    p = 0
    c1 = 1
    x[p] = 29
    x[c1] = 40
    Swap elements x[p] and x[c1] = 1
    x[p] = 40
    x[c1] = 29
    p = 0
    c1 = 0
    x[p] = 40
    x[c1] = 40
    i = 2
    p = 0
    c1 = 2
    x[p] = 40
    x[c1] = 17
    i = 3
    p = 1
    c1 = 3
    x[p] = 29
    x[c1] = 13
    i = 4
    p = 1
    c1 = 4
    x[p] = 29
    x[c1] = 39
    Swap elements x[p] and x[c1] = 4
    x[p] = 39
    x[c1] = 29
    p = 0
    c1 = 1
    x[p] = 40
    x[c1] = 39
    i = 5
    p = 2
    c1 = 5
    x[p] = 17
    x[c1] = 7
    i = 6
    p = 2
    c1 = 6
    x[p] = 17
    x[c1] = 5
    i = 7
    p = 3
    c1 = 7
    x[p] = 13
    x[c1] = 30
    Swap elements x[p] and x[c1] = 7
    x[p] = 30
    x[c1] = 13
    p = 1
    c1 = 3
    x[p] = 39
    x[c1] = 30
    i = 8
    p = 3
    c1 = 8
    x[p] = 30
    x[c1] = 11
    i = 9
    p = 4
    c1 = 9
    x[p] = 29
    x[c1] = 49
    Swap elements x[p] and x[c1] = 9
    x[p] = 49
    x[c1] = 29
    p = 1
    c1 = 4
    x[p] = 39
    x[c1] = 49
    Swap elements x[p] and x[c1] = 4
    x[p] = 49
    x[c1] = 39
    p = 0
    c1 = 1
    x[p] = 40
    x[c1] = 49
    Swap elements x[p] and x[c1] = 1
    x[p] = 49
    x[c1] = 40
    p = 0
    c1 = 0
    x[p] = 49
    x[c1] = 49
    i = 10
    p = 4
    c1 = 10
    x[p] = 39
    x[c1] = 24
    i = 11
    p = 5
    c1 = 11
    x[p] = 7
    x[c1] = 18
    Swap elements x[p] and x[c1] = 11
    x[p] = 18
    x[c1] = 7
    p = 2
    c1 = 5
    x[p] = 17
    x[c1] = 18
    Swap elements x[p] and x[c1] = 5
    x[p] = 18
    x[c1] = 17
    p = 0
    c1 = 2
    x[p] = 49
    x[c1] = 18
    i = 12
    p = 5
    c1 = 12
    x[p] = 17
    x[c1] = 33
    Swap elements x[p] and x[c1] = 12
    x[p] = 33
    x[c1] = 17
    p = 2
    c1 = 5
    x[p] = 18
    x[c1] = 33
    Swap elements x[p] and x[c1] = 5
    x[p] = 33
    x[c1] = 18
    p = 0
    c1 = 2
    x[p] = 49
    x[c1] = 33
    i = 13
    p = 6
    c1 = 13
    x[p] = 5
    x[c1] = 34
    Swap elements x[p] and x[c1] = 13
    x[p] = 34
    x[c1] = 5
    p = 2
    c1 = 6
    x[p] = 33
    x[c1] = 34
    Swap elements x[p] and x[c1] = 6
    x[p] = 34
    x[c1] = 33
    p = 0
    c1 = 2
    x[p] = 49
    x[c1] = 34
    i = 14
    p = 6
    c1 = 14
    x[p] = 33
    x[c1] = 50
    Swap elements x[p] and x[c1] = 14
    x[p] = 50
    x[c1] = 33
    p = 2
    c1 = 6
    x[p] = 34
    x[c1] = 50
    Swap elements x[p] and x[c1] = 6
    x[p] = 50
    x[c1] = 34
    p = 0
    c1 = 2
    x[p] = 49
    x[c1] = 50
    Swap elements x[p] and x[c1] = 2
    x[p] = 50
    x[c1] = 49
    p = 0
    c1 = 0
    x[p] = 50
    x[c1] = 50
    i = 15
    p = 7
    c1 = 15
    x[p] = 13
    x[c1] = 1
    i = 16
    p = 7
    c1 = 16
    x[p] = 13
    x[c1] = 23
    Swap elements x[p] and x[c1] = 16
    x[p] = 23
    x[c1] = 13
    p = 3
    c1 = 7
    x[p] = 30
    x[c1] = 23
    i = 17
    p = 8
    c1 = 17
    x[p] = 11
    x[c1] = 27
    Swap elements x[p] and x[c1] = 17
    x[p] = 27
    x[c1] = 11
    p = 3
    c1 = 8
    x[p] = 30
    x[c1] = 27
    i = 18
    p = 8
    c1 = 18
    x[p] = 27
    x[c1] = 48
    Swap elements x[p] and x[c1] = 18
    x[p] = 48
    x[c1] = 27
    p = 3
    c1 = 8
    x[p] = 30
    x[c1] = 48
    Swap elements x[p] and x[c1] = 8
    x[p] = 48
    x[c1] = 30
    p = 1
    c1 = 3
    x[p] = 40
    x[c1] = 48
    Swap elements x[p] and x[c1] = 3
    x[p] = 48
    x[c1] = 40
    p = 0
    c1 = 1
    x[p] = 50
    x[c1] = 48
    i = 19
    p = 9
    c1 = 19
    x[p] = 29
    x[c1] = 19
    i = 20
    p = 9
    c1 = 20
    x[p] = 29
    x[c1] = 28
    i = 21
    p = 10
    c1 = 21
    x[p] = 24
    x[c1] = 14
    i = 22
    p = 10
    c1 = 22
    x[p] = 24
    x[c1] = 47
    Swap elements x[p] and x[c1] = 22
    x[p] = 47
    x[c1] = 24
    p = 4
    c1 = 10
    x[p] = 39
    x[c1] = 47
    Swap elements x[p] and x[c1] = 10
    x[p] = 47
    x[c1] = 39
    p = 1
    c1 = 4
    x[p] = 48
    x[c1] = 47
    i = 23
    p = 11
    c1 = 23
    x[p] = 7
    x[c1] = 22
    Swap elements x[p] and x[c1] = 23
    x[p] = 22
    x[c1] = 7
    p = 5
    c1 = 11
    x[p] = 18
    x[c1] = 22
    Swap elements x[p] and x[c1] = 11
    x[p] = 22
    x[c1] = 18
    p = 2
    c1 = 5
    x[p] = 49
    x[c1] = 22
    i = 24
    p = 11
    c1 = 24
    x[p] = 18
    x[c1] = 6
    i = 25
    p = 12
    c1 = 25
    x[p] = 17
    x[c1] = 46
    Swap elements x[p] and x[c1] = 25
    x[p] = 46
    x[c1] = 17
    p = 5
    c1 = 12
    x[p] = 22
    x[c1] = 46
    Swap elements x[p] and x[c1] = 12
    x[p] = 46
    x[c1] = 22
    p = 2
    c1 = 5
    x[p] = 49
    x[c1] = 46
    i = 26
    p = 12
    c1 = 26
    x[p] = 22
    x[c1] = 2
    i = 27
    p = 13
    c1 = 27
    x[p] = 5
    x[c1] = 38
    Swap elements x[p] and x[c1] = 27
    x[p] = 38
    x[c1] = 5
    p = 6
    c1 = 13
    x[p] = 34
    x[c1] = 38
    Swap elements x[p] and x[c1] = 13
    x[p] = 38
    x[c1] = 34
    p = 2
    c1 = 6
    x[p] = 49
    x[c1] = 38
    i = 28
    p = 13
    c1 = 28
    x[p] = 34
    x[c1] = 37
    Swap elements x[p] and x[c1] = 28
    x[p] = 37
    x[c1] = 34
    p = 6
    c1 = 13
    x[p] = 38
    x[c1] = 37
    i = 29
    p = 14
    c1 = 29
    x[p] = 33
    x[c1] = 45
    Swap elements x[p] and x[c1] = 29
    x[p] = 45
    x[c1] = 33
    p = 6
    c1 = 14
    x[p] = 38
    x[c1] = 45
    Swap elements x[p] and x[c1] = 14
    x[p] = 45
    x[c1] = 38
    p = 2
    c1 = 6
    x[p] = 49
    x[c1] = 45
    i = 30
    p = 14
    c1 = 30
    x[p] = 38
    x[c1] = 10
    i = 31
    p = 15
    c1 = 31
    x[p] = 1
    x[c1] = 32
    Swap elements x[p] and x[c1] = 31
    x[p] = 32
    x[c1] = 1
    p = 7
    c1 = 15
    x[p] = 23
    x[c1] = 32
    Swap elements x[p] and x[c1] = 15
    x[p] = 32
    x[c1] = 23
    p = 3
    c1 = 7
    x[p] = 40
    x[c1] = 32
    i = 32
    p = 15
    c1 = 32
    x[p] = 23
    x[c1] = 44
    Swap elements x[p] and x[c1] = 32
    x[p] = 44
    x[c1] = 23
    p = 7
    c1 = 15
    x[p] = 32
    x[c1] = 44
    Swap elements x[p] and x[c1] = 15
    x[p] = 44
    x[c1] = 32
    p = 3
    c1 = 7
    x[p] = 40
    x[c1] = 44
    Swap elements x[p] and x[c1] = 7
    x[p] = 44
    x[c1] = 40
    p = 1
    c1 = 3
    x[p] = 48
    x[c1] = 44
    i = 33
    p = 16
    c1 = 33
    x[p] = 13
    x[c1] = 3
    i = 34
    p = 16
    c1 = 34
    x[p] = 13
    x[c1] = 35
    Swap elements x[p] and x[c1] = 34
    x[p] = 35
    x[c1] = 13
    p = 7
    c1 = 16
    x[p] = 40
    x[c1] = 35
    i = 35
    p = 17
    c1 = 35
    x[p] = 11
    x[c1] = 41
    Swap elements x[p] and x[c1] = 35
    x[p] = 41
    x[c1] = 11
    p = 8
    c1 = 17
    x[p] = 30
    x[c1] = 41
    Swap elements x[p] and x[c1] = 17
    x[p] = 41
    x[c1] = 30
    p = 3
    c1 = 8
    x[p] = 44
    x[c1] = 41
    i = 36
    p = 17
    c1 = 36
    x[p] = 30
    x[c1] = 8
    i = 37
    p = 18
    c1 = 37
    x[p] = 27
    x[c1] = 31
    Swap elements x[p] and x[c1] = 37
    x[p] = 31
    x[c1] = 27
    p = 8
    c1 = 18
    x[p] = 41
    x[c1] = 31
    i = 38
    p = 18
    c1 = 38
    x[p] = 31
    x[c1] = 15
    i = 39
    p = 19
    c1 = 39
    x[p] = 19
    x[c1] = 21
    Swap elements x[p] and x[c1] = 39
    x[p] = 21
    x[c1] = 19
    p = 9
    c1 = 19
    x[p] = 29
    x[c1] = 21
    i = 40
    p = 19
    c1 = 40
    x[p] = 21
    x[c1] = 43
    Swap elements x[p] and x[c1] = 40
    x[p] = 43
    x[c1] = 21
    p = 9
    c1 = 19
    x[p] = 29
    x[c1] = 43
    Swap elements x[p] and x[c1] = 19
    x[p] = 43
    x[c1] = 29
    p = 4
    c1 = 9
    x[p] = 47
    x[c1] = 43
    i = 41
    p = 20
    c1 = 41
    x[p] = 28
    x[c1] = 4
    i = 42
    p = 20
    c1 = 42
    x[p] = 28
    x[c1] = 9
    i = 43
    p = 21
    c1 = 43
    x[p] = 14
    x[c1] = 26
    Swap elements x[p] and x[c1] = 43
    x[p] = 26
    x[c1] = 14
    p = 10
    c1 = 21
    x[p] = 39
    x[c1] = 26
    i = 44
    p = 21
    c1 = 44
    x[p] = 26
    x[c1] = 16
    i = 45
    p = 22
    c1 = 45
    x[p] = 24
    x[c1] = 36
    Swap elements x[p] and x[c1] = 45
    x[p] = 36
    x[c1] = 24
    p = 10
    c1 = 22
    x[p] = 39
    x[c1] = 36
    i = 46
    p = 22
    c1 = 46
    x[p] = 36
    x[c1] = 20
    i = 47
    p = 23
    c1 = 47
    x[p] = 7
    x[c1] = 42
    Swap elements x[p] and x[c1] = 47
    x[p] = 42
    x[c1] = 7
    p = 11
    c1 = 23
    x[p] = 18
    x[c1] = 42
    Swap elements x[p] and x[c1] = 23
    x[p] = 42
    x[c1] = 18
    p = 5
    c1 = 11
    x[p] = 46
    x[c1] = 42
    i = 48
    p = 23
    c1 = 48
    x[p] = 18
    x[c1] = 12
    i = 49
    p = 24
    c1 = 49
    x[p] = 6
    x[c1] = 25
    Swap elements x[p] and x[c1] = 49
    x[p] = 25
    x[c1] = 6
    p = 11
    c1 = 24
    x[p] = 42
    x[c1] = 25
  END Build max heap
  START Sort max heap...
    i = 49
    Swap root and x[i]...
      (before) x[0] = 50
      (before) x[i] = 6
      (after) x[0] = 6
      (after) x[i] = 50
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 6
      x[c1] = 48
      x[c2] = 49
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 6
      x[c1] = 46
      x[c2] = 45
      Swap with left child
      p becomes 5
      p = 5
      c1 = 11
      c2 = 12
      x[p] = 6
      x[c1] = 42
      x[c2] = 22
      Swap with left child
      p becomes 11
      p = 11
      c1 = 23
      c2 = 24
      x[p] = 6
      x[c1] = 18
      x[c2] = 25
      Swap with right child
      p becomes 24
      p = 24
      c1 = 49
      c2 = 50
      x[p] = 6
      p has no children
    i = 48
    Swap root and x[i]...
      (before) x[0] = 49
      (before) x[i] = 12
      (after) x[0] = 12
      (after) x[i] = 49
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 12
      x[c1] = 48
      x[c2] = 46
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 12
      x[c1] = 44
      x[c2] = 47
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 12
      x[c1] = 43
      x[c2] = 39
      Swap with left child
      p becomes 9
      p = 9
      c1 = 19
      c2 = 20
      x[p] = 12
      x[c1] = 29
      x[c2] = 28
      Swap with left child
      p becomes 19
      p = 19
      c1 = 39
      c2 = 40
      x[p] = 12
      x[c1] = 19
      x[c2] = 21
      Swap with right child
      p becomes 40
      p = 40
      c1 = 81
      c2 = 82
      x[p] = 12
      p has no children
    i = 47
    Swap root and x[i]...
      (before) x[0] = 48
      (before) x[i] = 7
      (after) x[0] = 7
      (after) x[i] = 48
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 7
      x[c1] = 47
      x[c2] = 46
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 7
      x[c1] = 44
      x[c2] = 43
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 7
      x[c1] = 40
      x[c2] = 41
      Swap with right child
      p becomes 8
      p = 8
      c1 = 17
      c2 = 18
      x[p] = 7
      x[c1] = 30
      x[c2] = 31
      Swap with right child
      p becomes 18
      p = 18
      c1 = 37
      c2 = 38
      x[p] = 7
      x[c1] = 27
      x[c2] = 15
      Swap with left child
      p becomes 37
      p = 37
      c1 = 75
      c2 = 76
      x[p] = 7
      p has no children
    i = 46
    Swap root and x[i]...
      (before) x[0] = 47
      (before) x[i] = 20
      (after) x[0] = 20
      (after) x[i] = 47
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 20
      x[c1] = 44
      x[c2] = 46
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 20
      x[c1] = 42
      x[c2] = 45
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 20
      x[c1] = 37
      x[c2] = 38
      Swap with right child
      p becomes 14
      p = 14
      c1 = 29
      c2 = 30
      x[p] = 20
      x[c1] = 33
      x[c2] = 10
      Swap with left child
      p becomes 29
      p = 29
      c1 = 59
      c2 = 60
      x[p] = 20
      p has no children
    i = 45
    Swap root and x[i]...
      (before) x[0] = 46
      (before) x[i] = 24
      (after) x[0] = 24
      (after) x[i] = 46
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 24
      x[c1] = 44
      x[c2] = 45
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 24
      x[c1] = 42
      x[c2] = 38
      Swap with left child
      p becomes 5
      p = 5
      c1 = 11
      c2 = 12
      x[p] = 24
      x[c1] = 25
      x[c2] = 22
      Swap with left child
      p becomes 11
      p = 11
      c1 = 23
      c2 = 24
      x[p] = 24
      x[c1] = 18
      x[c2] = 6
    i = 44
    Swap root and x[i]...
      (before) x[0] = 45
      (before) x[i] = 16
      (after) x[0] = 16
      (after) x[i] = 45
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 16
      x[c1] = 44
      x[c2] = 42
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 16
      x[c1] = 41
      x[c2] = 43
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 16
      x[c1] = 29
      x[c2] = 39
      Swap with right child
      p becomes 10
      p = 10
      c1 = 21
      c2 = 22
      x[p] = 16
      x[c1] = 26
      x[c2] = 36
      Swap with right child
      p becomes 22
      p = 22
      c1 = 45
      c2 = 46
      x[p] = 16
      p has no children
    i = 43
    Swap root and x[i]...
      (before) x[0] = 44
      (before) x[i] = 14
      (after) x[0] = 14
      (after) x[i] = 44
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 14
      x[c1] = 43
      x[c2] = 42
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 14
      x[c1] = 41
      x[c2] = 39
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 14
      x[c1] = 40
      x[c2] = 31
      Swap with left child
      p becomes 7
      p = 7
      c1 = 15
      c2 = 16
      x[p] = 14
      x[c1] = 32
      x[c2] = 35
      Swap with right child
      p becomes 16
      p = 16
      c1 = 33
      c2 = 34
      x[p] = 14
      x[c1] = 3
      x[c2] = 13
    i = 42
    Swap root and x[i]...
      (before) x[0] = 43
      (before) x[i] = 9
      (after) x[0] = 9
      (after) x[i] = 43
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 9
      x[c1] = 41
      x[c2] = 42
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 9
      x[c1] = 25
      x[c2] = 38
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 9
      x[c1] = 37
      x[c2] = 33
      Swap with left child
      p becomes 13
      p = 13
      c1 = 27
      c2 = 28
      x[p] = 9
      x[c1] = 5
      x[c2] = 34
      Swap with right child
      p becomes 28
      p = 28
      c1 = 57
      c2 = 58
      x[p] = 9
      p has no children
    i = 41
    Swap root and x[i]...
      (before) x[0] = 42
      (before) x[i] = 4
      (after) x[0] = 4
      (after) x[i] = 42
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 4
      x[c1] = 41
      x[c2] = 38
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 4
      x[c1] = 40
      x[c2] = 39
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 4
      x[c1] = 35
      x[c2] = 31
      Swap with left child
      p becomes 7
      p = 7
      c1 = 15
      c2 = 16
      x[p] = 4
      x[c1] = 32
      x[c2] = 14
      Swap with left child
      p becomes 15
      p = 15
      c1 = 31
      c2 = 32
      x[p] = 4
      x[c1] = 1
      x[c2] = 23
      Swap with right child
      p becomes 32
      p = 32
      c1 = 65
      c2 = 66
      x[p] = 4
      p has no children
    i = 40
    Swap root and x[i]...
      (before) x[0] = 41
      (before) x[i] = 12
      (after) x[0] = 12
      (after) x[i] = 41
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 12
      x[c1] = 40
      x[c2] = 38
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 12
      x[c1] = 35
      x[c2] = 39
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 12
      x[c1] = 29
      x[c2] = 36
      Swap with right child
      p becomes 10
      p = 10
      c1 = 21
      c2 = 22
      x[p] = 12
      x[c1] = 26
      x[c2] = 16
      Swap with left child
      p becomes 21
      p = 21
      c1 = 43
      c2 = 44
      x[p] = 12
      p has no children
    i = 39
    Swap root and x[i]...
      (before) x[0] = 40
      (before) x[i] = 19
      (after) x[0] = 19
      (after) x[i] = 40
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 19
      x[c1] = 39
      x[c2] = 38
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 19
      x[c1] = 35
      x[c2] = 36
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 19
      x[c1] = 29
      x[c2] = 26
      Swap with left child
      p becomes 9
      p = 9
      c1 = 19
      c2 = 20
      x[p] = 19
      x[c1] = 21
      x[c2] = 28
      Swap with right child
      p becomes 20
      p = 20
      c1 = 41
      c2 = 42
      x[p] = 19
      p has no children
    i = 38
    Swap root and x[i]...
      (before) x[0] = 39
      (before) x[i] = 15
      (after) x[0] = 15
      (after) x[i] = 39
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 15
      x[c1] = 36
      x[c2] = 38
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 15
      x[c1] = 25
      x[c2] = 37
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 15
      x[c1] = 34
      x[c2] = 33
      Swap with left child
      p becomes 13
      p = 13
      c1 = 27
      c2 = 28
      x[p] = 15
      x[c1] = 5
      x[c2] = 9
    i = 37
    Swap root and x[i]...
      (before) x[0] = 38
      (before) x[i] = 7
      (after) x[0] = 7
      (after) x[i] = 38
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 7
      x[c1] = 36
      x[c2] = 37
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 7
      x[c1] = 25
      x[c2] = 34
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 7
      x[c1] = 15
      x[c2] = 33
      Swap with right child
      p becomes 14
      p = 14
      c1 = 29
      c2 = 30
      x[p] = 7
      x[c1] = 20
      x[c2] = 10
      Swap with left child
      p becomes 29
      p = 29
      c1 = 59
      c2 = 60
      x[p] = 7
      p has no children
    i = 36
    Swap root and x[i]...
      (before) x[0] = 37
      (before) x[i] = 8
      (after) x[0] = 8
      (after) x[i] = 37
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 8
      x[c1] = 36
      x[c2] = 34
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 8
      x[c1] = 35
      x[c2] = 29
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 8
      x[c1] = 32
      x[c2] = 31
      Swap with left child
      p becomes 7
      p = 7
      c1 = 15
      c2 = 16
      x[p] = 8
      x[c1] = 23
      x[c2] = 14
      Swap with left child
      p becomes 15
      p = 15
      c1 = 31
      c2 = 32
      x[p] = 8
      x[c1] = 1
      x[c2] = 4
    i = 35
    Swap root and x[i]...
      (before) x[0] = 36
      (before) x[i] = 11
      (after) x[0] = 11
      (after) x[i] = 36
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 11
      x[c1] = 35
      x[c2] = 34
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 11
      x[c1] = 32
      x[c2] = 29
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 11
      x[c1] = 23
      x[c2] = 31
      Swap with right child
      p becomes 8
      p = 8
      c1 = 17
      c2 = 18
      x[p] = 11
      x[c1] = 30
      x[c2] = 27
      Swap with left child
      p becomes 17
      p = 17
      c1 = 35
      c2 = 36
      x[p] = 11
      p has no children
    i = 34
    Swap root and x[i]...
      (before) x[0] = 35
      (before) x[i] = 13
      (after) x[0] = 13
      (after) x[i] = 35
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 13
      x[c1] = 32
      x[c2] = 34
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 13
      x[c1] = 25
      x[c2] = 33
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 13
      x[c1] = 15
      x[c2] = 20
      Swap with right child
      p becomes 14
      p = 14
      c1 = 29
      c2 = 30
      x[p] = 13
      x[c1] = 7
      x[c2] = 10
    i = 33
    Swap root and x[i]...
      (before) x[0] = 34
      (before) x[i] = 3
      (after) x[0] = 3
      (after) x[i] = 34
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 3
      x[c1] = 32
      x[c2] = 33
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 3
      x[c1] = 25
      x[c2] = 20
      Swap with left child
      p becomes 5
      p = 5
      c1 = 11
      c2 = 12
      x[p] = 3
      x[c1] = 24
      x[c2] = 22
      Swap with left child
      p becomes 11
      p = 11
      c1 = 23
      c2 = 24
      x[p] = 3
      x[c1] = 18
      x[c2] = 6
      Swap with left child
      p becomes 23
      p = 23
      c1 = 47
      c2 = 48
      x[p] = 3
      p has no children
    i = 32
    Swap root and x[i]...
      (before) x[0] = 33
      (before) x[i] = 4
      (after) x[0] = 4
      (after) x[i] = 33
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 4
      x[c1] = 32
      x[c2] = 25
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 4
      x[c1] = 31
      x[c2] = 29
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 4
      x[c1] = 23
      x[c2] = 30
      Swap with right child
      p becomes 8
      p = 8
      c1 = 17
      c2 = 18
      x[p] = 4
      x[c1] = 11
      x[c2] = 27
      Swap with right child
      p becomes 18
      p = 18
      c1 = 37
      c2 = 38
      x[p] = 4
      p has no children
    i = 31
    Swap root and x[i]...
      (before) x[0] = 32
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 32
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      x[c1] = 31
      x[c2] = 25
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 1
      x[c1] = 30
      x[c2] = 29
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 1
      x[c1] = 23
      x[c2] = 27
      Swap with right child
      p becomes 8
      p = 8
      c1 = 17
      c2 = 18
      x[p] = 1
      x[c1] = 11
      x[c2] = 4
      Swap with left child
      p becomes 17
      p = 17
      c1 = 35
      c2 = 36
      x[p] = 1
      p has no children
    i = 30
    Swap root and x[i]...
      (before) x[0] = 31
      (before) x[i] = 10
      (after) x[0] = 10
      (after) x[i] = 31
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 10
      x[c1] = 30
      x[c2] = 25
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 10
      x[c1] = 27
      x[c2] = 29
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 10
      x[c1] = 28
      x[c2] = 26
      Swap with left child
      p becomes 9
      p = 9
      c1 = 19
      c2 = 20
      x[p] = 10
      x[c1] = 21
      x[c2] = 19
      Swap with left child
      p becomes 19
      p = 19
      c1 = 39
      c2 = 40
      x[p] = 10
      p has no children
    i = 29
    Swap root and x[i]...
      (before) x[0] = 30
      (before) x[i] = 7
      (after) x[0] = 7
      (after) x[i] = 30
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 7
      x[c1] = 29
      x[c2] = 25
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 7
      x[c1] = 27
      x[c2] = 28
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 7
      x[c1] = 21
      x[c2] = 26
      Swap with right child
      p becomes 10
      p = 10
      c1 = 21
      c2 = 22
      x[p] = 7
      x[c1] = 12
      x[c2] = 16
      Swap with right child
      p becomes 22
      p = 22
      c1 = 45
      c2 = 46
      x[p] = 7
      p has no children
    i = 28
    Swap root and x[i]...
      (before) x[0] = 29
      (before) x[i] = 9
      (after) x[0] = 9
      (after) x[i] = 29
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 9
      x[c1] = 28
      x[c2] = 25
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 9
      x[c1] = 27
      x[c2] = 26
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 9
      x[c1] = 23
      x[c2] = 11
      Swap with left child
      p becomes 7
      p = 7
      c1 = 15
      c2 = 16
      x[p] = 9
      x[c1] = 8
      x[c2] = 14
      Swap with right child
      p becomes 16
      p = 16
      c1 = 33
      c2 = 34
      x[p] = 9
      p has no children
    i = 27
    Swap root and x[i]...
      (before) x[0] = 28
      (before) x[i] = 5
      (after) x[0] = 5
      (after) x[i] = 28
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 5
      x[c1] = 27
      x[c2] = 25
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 5
      x[c1] = 23
      x[c2] = 26
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 5
      x[c1] = 21
      x[c2] = 16
      Swap with left child
      p becomes 9
      p = 9
      c1 = 19
      c2 = 20
      x[p] = 5
      x[c1] = 10
      x[c2] = 19
      Swap with right child
      p becomes 20
      p = 20
      c1 = 41
      c2 = 42
      x[p] = 5
      p has no children
    i = 26
    Swap root and x[i]...
      (before) x[0] = 27
      (before) x[i] = 2
      (after) x[0] = 2
      (after) x[i] = 27
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 2
      x[c1] = 26
      x[c2] = 25
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 2
      x[c1] = 23
      x[c2] = 21
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 2
      x[c1] = 14
      x[c2] = 11
      Swap with left child
      p becomes 7
      p = 7
      c1 = 15
      c2 = 16
      x[p] = 2
      x[c1] = 8
      x[c2] = 9
      Swap with right child
      p becomes 16
      p = 16
      c1 = 33
      c2 = 34
      x[p] = 2
      p has no children
    i = 25
    Swap root and x[i]...
      (before) x[0] = 26
      (before) x[i] = 17
      (after) x[0] = 17
      (after) x[i] = 26
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 17
      x[c1] = 23
      x[c2] = 25
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 17
      x[c1] = 24
      x[c2] = 20
      Swap with left child
      p becomes 5
      p = 5
      c1 = 11
      c2 = 12
      x[p] = 17
      x[c1] = 18
      x[c2] = 22
      Swap with right child
      p becomes 12
      p = 12
      c1 = 25
      c2 = 26
      x[p] = 17
      p has no children
    i = 24
    Swap root and x[i]...
      (before) x[0] = 25
      (before) x[i] = 6
      (after) x[0] = 6
      (after) x[i] = 25
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 6
      x[c1] = 23
      x[c2] = 24
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 6
      x[c1] = 22
      x[c2] = 20
      Swap with left child
      p becomes 5
      p = 5
      c1 = 11
      c2 = 12
      x[p] = 6
      x[c1] = 18
      x[c2] = 17
      Swap with left child
      p becomes 11
      p = 11
      c1 = 23
      c2 = 24
      x[p] = 6
      p has one child
      x[c1] = 3
    i = 23
    Swap root and x[i]...
      (before) x[0] = 24
      (before) x[i] = 3
      (after) x[0] = 3
      (after) x[i] = 24
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 3
      x[c1] = 23
      x[c2] = 22
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 3
      x[c1] = 14
      x[c2] = 21
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 3
      x[c1] = 19
      x[c2] = 16
      Swap with left child
      p becomes 9
      p = 9
      c1 = 19
      c2 = 20
      x[p] = 3
      x[c1] = 10
      x[c2] = 5
      Swap with left child
      p becomes 19
      p = 19
      c1 = 39
      c2 = 40
      x[p] = 3
      p has no children
    i = 22
    Swap root and x[i]...
      (before) x[0] = 23
      (before) x[i] = 7
      (after) x[0] = 7
      (after) x[i] = 23
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 7
      x[c1] = 21
      x[c2] = 22
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 7
      x[c1] = 18
      x[c2] = 20
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 7
      x[c1] = 15
      x[c2] = 13
      Swap with left child
      p becomes 13
      p = 13
      c1 = 27
      c2 = 28
      x[p] = 7
      p has no children
    i = 21
    Swap root and x[i]...
      (before) x[0] = 22
      (before) x[i] = 12
      (after) x[0] = 12
      (after) x[i] = 22
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 12
      x[c1] = 21
      x[c2] = 20
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 12
      x[c1] = 14
      x[c2] = 19
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 12
      x[c1] = 10
      x[c2] = 16
      Swap with right child
      p becomes 10
      p = 10
      c1 = 21
      c2 = 22
      x[p] = 12
      p has no children
    i = 20
    Swap root and x[i]...
      (before) x[0] = 21
      (before) x[i] = 5
      (after) x[0] = 5
      (after) x[i] = 21
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 5
      x[c1] = 19
      x[c2] = 20
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 5
      x[c1] = 18
      x[c2] = 15
      Swap with left child
      p becomes 5
      p = 5
      c1 = 11
      c2 = 12
      x[p] = 5
      x[c1] = 6
      x[c2] = 17
      Swap with right child
      p becomes 12
      p = 12
      c1 = 25
      c2 = 26
      x[p] = 5
      p has no children
    i = 19
    Swap root and x[i]...
      (before) x[0] = 20
      (before) x[i] = 3
      (after) x[0] = 3
      (after) x[i] = 20
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 3
      x[c1] = 19
      x[c2] = 18
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 3
      x[c1] = 14
      x[c2] = 16
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 3
      x[c1] = 10
      x[c2] = 12
      Swap with right child
      p becomes 10
      p = 10
      c1 = 21
      c2 = 22
      x[p] = 3
      p has no children
    i = 18
    Swap root and x[i]...
      (before) x[0] = 19
      (before) x[i] = 4
      (after) x[0] = 4
      (after) x[i] = 19
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 4
      x[c1] = 16
      x[c2] = 18
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 4
      x[c1] = 17
      x[c2] = 15
      Swap with left child
      p becomes 5
      p = 5
      c1 = 11
      c2 = 12
      x[p] = 4
      x[c1] = 6
      x[c2] = 5
      Swap with left child
      p becomes 11
      p = 11
      c1 = 23
      c2 = 24
      x[p] = 4
      p has no children
    i = 17
    Swap root and x[i]...
      (before) x[0] = 18
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 18
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      x[c1] = 16
      x[c2] = 17
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 1
      x[c1] = 6
      x[c2] = 15
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 1
      x[c1] = 7
      x[c2] = 13
      Swap with right child
      p becomes 14
      p = 14
      c1 = 29
      c2 = 30
      x[p] = 1
      p has no children
    i = 16
    Swap root and x[i]...
      (before) x[0] = 17
      (before) x[i] = 2
      (after) x[0] = 2
      (after) x[i] = 17
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 2
      x[c1] = 16
      x[c2] = 15
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 2
      x[c1] = 14
      x[c2] = 12
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 2
      x[c1] = 9
      x[c2] = 11
      Swap with right child
      p becomes 8
      p = 8
      c1 = 17
      c2 = 18
      x[p] = 2
      p has no children
    i = 15
    Swap root and x[i]...
      (before) x[0] = 16
      (before) x[i] = 8
      (after) x[0] = 8
      (after) x[i] = 16
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 8
      x[c1] = 14
      x[c2] = 15
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 8
      x[c1] = 6
      x[c2] = 13
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 8
      x[c1] = 7
      x[c2] = 1
    i = 14
    Swap root and x[i]...
      (before) x[0] = 15
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 15
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      x[c1] = 14
      x[c2] = 13
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 1
      x[c1] = 11
      x[c2] = 12
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 1
      x[c1] = 10
      x[c2] = 3
      Swap with left child
      p becomes 9
      p = 9
      c1 = 19
      c2 = 20
      x[p] = 1
      p has no children
    i = 13
    Swap root and x[i]...
      (before) x[0] = 14
      (before) x[i] = 7
      (after) x[0] = 7
      (after) x[i] = 14
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 7
      x[c1] = 12
      x[c2] = 13
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 7
      x[c1] = 6
      x[c2] = 8
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 7
      p has no children
    i = 12
    Swap root and x[i]...
      (before) x[0] = 13
      (before) x[i] = 5
      (after) x[0] = 5
      (after) x[i] = 13
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 5
      x[c1] = 12
      x[c2] = 8
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 5
      x[c1] = 11
      x[c2] = 10
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 5
      x[c1] = 9
      x[c2] = 2
      Swap with left child
      p becomes 7
      p = 7
      c1 = 15
      c2 = 16
      x[p] = 5
      p has no children
    i = 11
    Swap root and x[i]...
      (before) x[0] = 12
      (before) x[i] = 4
      (after) x[0] = 4
      (after) x[i] = 12
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 4
      x[c1] = 11
      x[c2] = 8
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 4
      x[c1] = 9
      x[c2] = 10
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 4
      x[c1] = 1
      x[c2] = 3
    i = 10
    Swap root and x[i]...
      (before) x[0] = 11
      (before) x[i] = 3
      (after) x[0] = 3
      (after) x[i] = 11
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 3
      x[c1] = 10
      x[c2] = 8
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 3
      x[c1] = 9
      x[c2] = 4
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 3
      x[c1] = 5
      x[c2] = 2
      Swap with left child
      p becomes 7
      p = 7
      c1 = 15
      c2 = 16
      x[p] = 3
      p has no children
    i = 9
    Swap root and x[i]...
      (before) x[0] = 10
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 10
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      x[c1] = 9
      x[c2] = 8
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 1
      x[c1] = 5
      x[c2] = 4
      Swap with left child
      p becomes 3
      p = 3
      c1 = 7
      c2 = 8
      x[p] = 1
      x[c1] = 3
      x[c2] = 2
      Swap with left child
      p becomes 7
      p = 7
      c1 = 15
      c2 = 16
      x[p] = 1
      p has no children
    i = 8
    Swap root and x[i]...
      (before) x[0] = 9
      (before) x[i] = 2
      (after) x[0] = 2
      (after) x[i] = 9
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 2
      x[c1] = 5
      x[c2] = 8
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 2
      x[c1] = 6
      x[c2] = 7
      Swap with right child
      p becomes 6
      p = 6
      c1 = 13
      c2 = 14
      x[p] = 2
      p has no children
    i = 7
    Swap root and x[i]...
      (before) x[0] = 8
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 8
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      x[c1] = 5
      x[c2] = 7
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 1
      x[c1] = 6
      x[c2] = 2
      Swap with left child
      p becomes 5
      p = 5
      c1 = 11
      c2 = 12
      x[p] = 1
      p has no children
    i = 6
    Swap root and x[i]...
      (before) x[0] = 7
      (before) x[i] = 2
      (after) x[0] = 2
      (after) x[i] = 7
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 2
      x[c1] = 5
      x[c2] = 6
      Swap with right child
      p becomes 2
      p = 2
      c1 = 5
      c2 = 6
      x[p] = 2
      p has one child
      x[c1] = 1
    i = 5
    Swap root and x[i]...
      (before) x[0] = 6
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 6
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      x[c1] = 5
      x[c2] = 2
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 1
      x[c1] = 3
      x[c2] = 4
      Swap with right child
      p becomes 4
      p = 4
      c1 = 9
      c2 = 10
      x[p] = 1
      p has no children
    i = 4
    Swap root and x[i]...
      (before) x[0] = 5
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 5
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      x[c1] = 4
      x[c2] = 2
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 1
      p has one child
      x[c1] = 3
      Swap with one child
    i = 3
    Swap root and x[i]...
      (before) x[0] = 4
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 4
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      x[c1] = 3
      x[c2] = 2
      Swap with left child
      p becomes 1
      p = 1
      c1 = 3
      c2 = 4
      x[p] = 1
      p has no children
    i = 2
    Swap root and x[i]...
      (before) x[0] = 3
      (before) x[i] = 2
      (after) x[0] = 2
      (after) x[i] = 3
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 2
      p has one child
      x[c1] = 1
    i = 1
    Swap root and x[i]...
      (before) x[0] = 2
      (before) x[i] = 1
      (after) x[0] = 1
      (after) x[i] = 2
    Start at x[0], pick biggest child and replace, move down...
      p = 0
      c1 = 1
      c2 = 2
      x[p] = 1
      p has no children
  x = 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 
  lastTimedDuration = 16755234
  cumulativeDuration = 16755234
Reset timer...
  At top of call:
    cumulativeDuration = 16755234
    lastTimedDuration = 16755234
    lastTimedEnd = 25109317979986
    lastTimedStart = 25109301224752
    isTimerOn = false
  At bottom of call:
    cumulativeDuration = 0
    lastTimedDuration = 0
    lastTimedEnd = 0
    lastTimedStart = 0
    isTimerOn = false
